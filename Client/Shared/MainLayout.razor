@using BlazorApp1.Client.Theming
@inherits LayoutComponentBase
@inject IDialogService DialogService
@inject IStringLocalizer<MainLayout> T
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ThemeManager ThemeManager

<MudThemeProvider IsDarkMode="@(_currentColorScheme == ColorScheme.Dark)" Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <AppBar DrawerToggleCallback="@((e) => DrawerToggle())" />
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">@T["AppTitle"]</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16">
            @Body

            <MudScrollToTop>
                <MudFab Color="Color.Tertiary" Icon="@Icons.Filled.KeyboardArrowUp" />
            </MudScrollToTop>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private MudTheme _theme = new();
    bool _drawerOpen = true;
    ColorScheme? _currentColorScheme;

    protected override void OnInitialized()
    {
        ThemeManager.ColorSchemeChanged += OnColorSchemeChanged;
        _currentColorScheme = ThemeManager.CurrentColorScheme;
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void OnColorSchemeChanged(object? sender, ColorSchemeChangedEventArgs ea)
    {
        _currentColorScheme = ea.ColorScheme;

        StateHasChanged();
    }
}