@using BlazorApp1.Client.Theming
@inherits LayoutComponentBase
@inject IDialogService DialogService
@inject IStringLocalizer<MainLayout> T
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ThemeDetector ThemeDetector

<MudThemeProvider IsDarkMode="@(_currentTheme == Theme.Dark)" Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <AppBar DrawerToggleCallback="@((e) => DrawerToggle())" SelectedTheme="_currentTheme" ThemeToggleCallback="@(async (theme) => await SetPreferredTheme(theme))" />
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">@T["AppTitle"]</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private MudTheme _theme = new();
    bool _drawerOpen = true;
    Theme? _preferredTheme;
    Theme? _currentTheme;

    protected override async Task OnInitializedAsync()
    {
        _preferredTheme = await LocalStorage.GetItemAsync<Theme?>("preferredTheme");
        _currentTheme = await ThemeDetector.GetCurrentThemeAsync();

        if(_preferredTheme is not null)
        {
            _currentTheme = _preferredTheme;
        }

        ThemeDetector.ThemeChanged += OnDarkModeChanged;
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    async Task SetPreferredTheme(Theme? preferredTheme)
    {
        _preferredTheme = preferredTheme;

        if (_preferredTheme is not null)
        {
            _currentTheme = preferredTheme;
        }
        else
        {
            _currentTheme = await ThemeDetector.GetCurrentThemeAsync();
        }

        await LocalStorage.SetItemAsync("preferredTheme", _preferredTheme);

        StateHasChanged();
    }

    async Task DarkModeToggle()
    {
        _currentTheme = _preferredTheme == Theme.Dark ? Theme.Light : Theme.Dark;
        _preferredTheme = _currentTheme;

        await LocalStorage.SetItemAsync("preferredTheme", _preferredTheme);
    }

    void OnDarkModeChanged(object? sender, ThemeChangedEventArgs ea)
    {
        if (_preferredTheme is not null) 
        {
            return;
        }

        if (_currentTheme != ea.Theme)
        {
            _currentTheme = ea.Theme;
        }

        StateHasChanged();
    }
}