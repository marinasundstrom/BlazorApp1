@page "/test"
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client
@using System.ComponentModel.DataAnnotations
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AccessTokenProvider
@inject ISnackbar Snackbar

<PageTitle>Test</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Test</MudText>

<MudPaper Elevation="1" Class="px-4 py-4">
    <EditForm Model="@this" OnValidSubmit="OnSubmit">
        <MudTextField Variant="Variant.Outlined" Label="Your name" @bind-Value="Name" For="() => Name"></MudTextField>

        <MudButton Class="mt-2" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Say hi</MudButton>
    </EditForm>
</MudPaper>

@code {
    HubConnection hubConnection = null!;
    
    [Required]
    public string Name { get; set; } = null!;

    async Task OnSubmit() 
    {
        await hubConnection.InvokeAsync("SayHi", Name);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl($"{NavigationManager.BaseUri}hubs/test", options =>
                {
                    options.AccessTokenProvider = async () =>
                    {
                        var results = await AccessTokenProvider.RequestAccessToken(new AccessTokenRequestOptions() { Scopes = new[] { "BlazorApp1.ServerAPI" } });
                        if (results.TryGetToken(out var accessToken))
                        {
                            return accessToken.Value;
                        }
                        return null!;
                    };
                })
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<string>("Responded", OnReponded);

            hubConnection.Closed += (error) =>
            {
                if (error is not null)
                {
                    Snackbar.Add($"{error.Message}", Severity.Error);
                }

                Snackbar.Add("Connection closed");

                return Task.CompletedTask;
            };

            hubConnection.Reconnected += (error) =>
            {
                Snackbar.Add("Reconnected");

                return Task.CompletedTask;
            };

            hubConnection.Reconnecting += (error) =>
            {
                Snackbar.Add("Reconnecting");

                return Task.CompletedTask;
            };

            await hubConnection.StartAsync();

            Snackbar.Add("Connected");
        }
        catch (Exception exc)
        {
            Snackbar.Add(exc.Message.ToString(), Severity.Error);
        }
    }

    Task OnReponded(string message)
    {
        Snackbar.Add(message);

        StateHasChanged();

        return Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}