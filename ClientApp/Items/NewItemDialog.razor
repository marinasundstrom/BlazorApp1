@using System.ComponentModel.DataAnnotations
@inject IStringLocalizer<NewItemDialog> T
@inject IStringLocalizer<Resources.App> T2
@inject IStatusesClient StatusesClient

<div style="width: 350px; max-width: 350px;">
    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">

        <DataAnnotationsValidator />
        <MudDialog>
            <DialogContent>
                <MudTextField Label="@T["Name"]" HelperText="Max. 60 characters"
                              @bind-Value="model.Name" For="@(() => model.Name)" />
                <MudTextField Label="@T["Description"]" Lines="3" Class="mt-3"
                              @bind-Value="model.Description" For="@(() => model.Description)" />
                <MudAutocomplete T="StatusDto" Label="@T["Status"]" Class="mt-3" ToStringFunc="(s) => T2[s.Name]" @bind-Value="model.Status" SearchFunc="@Search">

                </MudAutocomplete>              
            </DialogContent>

            <DialogActions>
                <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="() => MudDialog.Cancel()">@T["Cancel"]</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Text" Color="Color.Primary">@T["Create"]</MudButton>
            </DialogActions>
        </MudDialog>

    </EditForm>
</div>

@code {
    FormModel model = new FormModel();

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    protected override async Task OnInitializedAsync() 
    {
        statuses = await StatusesClient.GetStatusesAsync();
        model.Status = statuses.First();
    }

    void OnValidSubmit() => MudDialog.Close(DialogResult.Ok(model));

    void Cancel() => MudDialog.Cancel();

    public class FormModel
    {
        [Required(ErrorMessageResourceType = typeof(Resources.App), ErrorMessageResourceName = "RequiredError")]
        [StringLength(60, ErrorMessageResourceType = typeof(Resources.App), ErrorMessageResourceName = "MaxLengthError")]
        public string Name { get; set; } = null!;

        [Required(ErrorMessageResourceType = typeof(Resources.App), ErrorMessageResourceName = "RequiredError")]
        [StringLength(240, ErrorMessageResourceType = typeof(Resources.App), ErrorMessageResourceName = "MaxLengthError")]
        public string Description { get; set; } = null!;

        [Required]
        public StatusDto Status { get; set; } = null!;
    }


    IEnumerable<StatusDto>? statuses = null;

    private async Task<IEnumerable<StatusDto>> Search(string value)
    {
        if (string.IsNullOrEmpty(value))
            return statuses;

        return statuses.Where(x => T2[x.Name].Value.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
