@page "/items/{Id}"
@inject NavigationManager NavigationManager
@inject IStringLocalizer<ItemsPage> T
@inject IStringLocalizer<Resources.App> T2
@inject IItemsClient ItemsClient
@inject IStatusesClient StatusesClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ICurrentUserService CurrentUserService

@if (item is null)
{
    if (loading)
    {
        <p>Loading...</p>
    }
    else if (error)
    {
        @if (notFound)
        {
            <MudText Typo="Typo.h3" GutterBottom="true">Not found :(</MudText>
        }
        else
        {
            <MudText Typo="Typo.h3" GutterBottom="true">Something went wrong</MudText>
        }
    }
}
else
{
    <PageTitle>@item.Name</PageTitle>

    <MudText Typo="Typo.h3" GutterBottom="true">@item.Name</MudText>

    <MudText Typo="Typo.caption" GutterBottom="true">Created by @item.CreatedBy at @item.Created.ToString("g")</MudText>

    <MudGrid class="mt-4">
        @if (item.Image is not null)
        {
            <MudItem xs="12" md="4">
                <MudImage Src="@item.Image" Alt="Item picture" ObjectFit="ObjectFit.Cover" Elevation="25" Width="250" Class="rounded-lg" />
            </MudItem>
        }

        <MudItem xs="12" md="8">
            <MudPaper Elevation="25" Class="pa-4">
                <MudText Typo="Typo.body1">@item.Description</MudText>

                <MudSelect T="StatusDto" Label="@T["Status"]" Class="mt-3" ToStringFunc="(s) => T2[s.Name]" Value="item.Status" ValueChanged="OnStatusChanged">
                    @foreach (var status in statuses ?? Array.Empty<StatusDto>())
                    {
                        <MudSelectItem Value="@status">@T2[status.Name]</MudSelectItem>
                    }
                </MudSelect>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    ItemDto? item;
    bool loading;
    bool error;
    bool notFound;
    IEnumerable<StatusDto>? statuses = null;

    [Parameter] public string Id { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        notFound = false;

        statuses = await StatusesClient.GetStatusesAsync();

        try
        {
            item = await ItemsClient.GetItemAsync(Id);
        }
        catch (ApiException exc)
        {
            if (exc.StatusCode == 404)
            {
                notFound = true;
            }
            error = true;
        }
        catch (HttpRequestException exc)
        {
            error = true;
        }
        finally
        {
            loading = false;
        }
    }

    async Task OnStatusChanged(StatusDto newStatus)
    {
        if (item!.Status.Id == newStatus.Id)
        {
            return;
        }

        var oldStatus = item!.Status;

        try
        {
            await ItemsClient.UpdateStatusAsync(item.Id, new UpdateItemStatusDto { StatusId = newStatus.Id });

            Snackbar.Add(T["StatusUpdated"], Severity.Info);
        }
        catch (Exception)
        {
            item.Status = oldStatus;

            Snackbar.Add(T["StatusUpdatedFailed"], Severity.Error);
        }
    }
}